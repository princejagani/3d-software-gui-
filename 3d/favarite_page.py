# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo4.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from db_module import *
from PyQt5.QtWidgets import *
import sys
from PyQt5.QtCore import *
from PyQt5.QtWebEngineWidgets import QWebEngineView as QWebView,QWebEnginePage as QWebPage
import history_basic

class QLabel_alterada(QLabel):
    clicked=pyqtSignal()

    def mousePressEvent(self, ev):
        self.clicked.emit()

class Ui_Form(object):
    def __init__(self,main_widget):
        self.favorite_widget = QtWidgets.QWidget(main_widget)
        self.scroll_fav_model=QScrollArea()
        self.scroll_fav_video=QScrollArea()
        self.vbox1 = QtWidgets.QGridLayout() 
        self.vbox=QtWidgets.QGridLayout()

    def setupUi(self,main_widget,gridLayout_4,main_grid_Layout,main_2_horizontalLayout,verticalLayout):
        self.favorite_widget.show()
        self.favorite_widget.setObjectName("favorite_widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.favorite_widget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.fav_model_widget = QtWidgets.QWidget(self.favorite_widget)
        self.fav_model_widget.setStyleSheet("background-color: rgb(85, 255, 255);")
        self.fav_model_widget.setObjectName("fav_model_widget")
        self.horizontalLayout.addWidget(self.scroll_fav_model)
        self.fav_video_widget = QtWidgets.QWidget(self.favorite_widget)
        self.fav_video_widget.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.fav_video_widget.setObjectName("fav_video_widget")
        self.horizontalLayout.addWidget(self.scroll_fav_video)
        gridLayout_4.addWidget(self.favorite_widget, 0, 0, 1, 1)
        main_grid_Layout.addLayout(gridLayout_4, 2, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(20, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        main_grid_Layout.addItem(spacerItem4, 1, 0, 1, 1)
        self.favarite_label = QtWidgets.QLabel(main_widget)
        self.fav_video_widget.setLayout(self.vbox)
        self.fav_model_widget.setLayout(self.vbox1)
        self.scroll_fav_model.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_fav_model.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_fav_model.setWidgetResizable(True)
        self.scroll_fav_model.setStyleSheet("background-color: rgb(36, 36, 36);border:0px;")
        self.scroll_fav_model.setWidget(self.fav_model_widget)
        self.scroll_fav_video.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_fav_video.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_fav_video.setWidgetResizable(True)
        self.scroll_fav_video.setStyleSheet("background-color: rgb(36, 36, 36);border:0px;")
        self.scroll_fav_video.setWidget(self.fav_video_widget)
        self.fav_disp_widget= QtWidgets.QWidget(main_widget)
        self.fav_disp_widget.setStyleSheet("background-color: rgb(11,11,11);")
        # self.horizontalLayout.addWidget(self.his_disp_widget)
        self.fav_disp_widget.setObjectName("his_disp_widget")
        gridLayout_4.addWidget(self.fav_disp_widget,0,0,1,1)
        self.favarite_label.setStyleSheet("color: rgb(255, 255, 255);\n"
"\n"
"font: 57 12pt \"Poppins Medium\";")
        self.favarite_label.setObjectName("favarite_label")
        main_grid_Layout.addWidget(self.favarite_label, 0, 0, 1, 1)
        main_2_horizontalLayout.addWidget(main_widget)
        verticalLayout.addLayout(main_2_horizontalLayout)
        self.close_btn = QtWidgets.QPushButton(self.fav_disp_widget)
        self.close_btn.setStyleSheet("QPushButton{\n"
"background-color: rgb();\n"
"color: rgb(255, 255, 255);\n"
"border-style:outset;\n"
"border-width:0px;\n"
"border-radius:14px;\n"
"border-color: rgb(62, 62, 62);\n"
"padding:6px\n"
"}\n"
"QPushButton:hover{\n"
"background-color: rgb(11, 11, 11);\n"
"}")
        self.close_btn.setText("")
        self.close_btn.clicked.connect(self.close_web)
        self.close_btn.setIconSize(QtCore.QSize(80, 80))
        self.close_btn.setObjectName("close_btn")
        self.close_btn.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.icon_model=QtGui.QIcon()
        self.icon_model.addPixmap(QtGui.QPixmap("icon/cross.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.close_btn.setIcon(self.icon_model)
        self.close_btn.hide()
        self.web=QWebView(self.fav_disp_widget)
        self.load_data()
        # self.retranslateUi(Form)
        # QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.favarite_label.setText(_translate("Form", "Favarite"))

    def close_web(self):
        self.fav_disp_widget.hide()
        # self.scroll_his_model.show()
        # self.scroll_his_video.show()
        self.favorite_widget.show()

    def video_render(self,num,id):
        history_basic.count_history(id,'video')
       
        f = open('c:/xampp/htdocs/main_data/index1.html','w')
        html_template =f"""<html>

<head>
     <link rel="stylesheet" type="text/css" href="demo.css">

</head>

<body>
    <video controls id="myvideo">
  <source src="{str(num)}" type="video/webm">
   <source src="small.ogg" type="video/ogg">

</video>


</body>

</html>"""
        f.write(html_template)
        f.close()
        self.url=f"http://localhost/main_data/index1.html"
        self.web.load(QUrl(self.url))
        self.web.setGeometry(QtCore.QRect(0, 0, 1600, 830))
        self.close_btn.show()
        self.close_btn.raise_()
        self.close_btn.setGeometry(QtCore.QRect(1560, 0, 30, 30))
        # self.scroll_his_model.hide()
        # self.scroll_his_video.hide()
        self.favorite_widget.hide()
        self.fav_disp_widget.show()

    def model_render(self,num,id):
        history_basic.count_history(id,'model')
        # self.scroll_his_model.hide()
        # self.scroll_his_video.hide()
        self.favorite_widget.hide()
        self.fav_disp_widget.show()
        self.url=f"http:/localhost/main_data/{str(num)}"
        self.web.load(QUrl(self.url))
        self.web.setGeometry(QtCore.QRect(0, 0, 1600, 830))
        # self.web.show()
        self.close_btn.raise_()
        self.close_btn.show()
        self.close_btn.setGeometry(QtCore.QRect(1560, 0, 30, 30))
        
        # self.history_widget.hide()

    def fun(self,num,num1,id):
        self.object[num].clicked.connect(lambda:self.video_render(str(num1),id))
   
    def fun1(self,num,num1,id):
        self.object1[num].clicked.connect(lambda:self.model_render(str(num1),id))

    def load_data(self):
        self.fav_disp_widget.hide()
        self.favorite_widget.show()
        self.object1=[]
        self.object=[]
        sql=f'SELECT * FROM model_file WHERE favorite=1'
        mycursor.execute(sql)
        myresult=mycursor.fetchall()
        print(myresult)
        if(myresult!=[]):
            for i in range(0,len(myresult)):
                 self.object1.append(QLabel_alterada(self.fav_model_widget))
            for j in range(0,len(myresult)):
                for y in range(2):
                    self.object1[j] = QLabel_alterada(self.fav_model_widget)
                    self.object1[j].setText(f"{myresult[j][4]}\n{myresult[j][7]}")
                    self.object1[j].setMinimumSize(300,40)
                    self.object1[j].setStyleSheet("color:white;font: 25 9pt \"Poppins Medium\";")
                    self.object1[j].setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
                    self.object1[j].setScaledContents(True)
                    self.vbox1.addWidget(self.object1[j],j,y)
                    # self.object1[i].clicked.connect(self.home1)
                    self.object1[j].setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                    if(y==0):
                            self.object1[j].setPixmap(QtGui.QPixmap(f"C:/xampp/htdocs/main_data/{myresult[j][6]}"))
                            self.object1[j].setMinimumSize(QtCore.QSize(350, 200))
                            self.fun1(j,myresult[j][5],myresult[j][0])
        sql1=f'SELECT * FROM video WHERE favorite=1'
        mycursor.execute(sql1)
        myresult1=mycursor.fetchall()
        print(myresult1)
        if(myresult1!=[]):
            for i in range(0,len(myresult1)):
                 self.object.append(QLabel_alterada(self.fav_video_widget))
            for j in range(0,len(myresult1)):
                for y in range(2):
                    self.object[j] = QLabel_alterada(self.fav_video_widget)
                    self.object[j].setText(f"{myresult1[j][4]}\n{myresult1[j][7]}")
                    self.object[j].setMinimumSize(300,40)
                    self.object[j].setStyleSheet("color:white;font: 25 9pt \"Poppins Medium\";")
                    self.object[j].setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
                    self.object[j].setScaledContents(True)
                    self.vbox.addWidget(self.object[j],j,y)
                    # self.object1[i].clicked.connect(self.home1)
                    self.object[j].setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
                    if(y==0):
                            self.object[j].setPixmap(QtGui.QPixmap(f"C:/xampp/htdocs/main_data/{myresult1[j][6]}"))
                            self.object[j].setMinimumSize(QtCore.QSize(350, 200))
                            self.fun(j,myresult1[j][5],myresult1[j][0])


# import xyz_rc
